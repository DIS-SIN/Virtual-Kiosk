{"version":3,"sources":["assets/kiosk.png","assets/background.png","Home.js","components/templates/AboutPage.js","dictionaries/en.js","App_EN.js","dictionaries/fr.js","App_FR.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","richPreviewRef","useRef","showPreview","ev","current","classList","toggle","className","style","backgroundImage","background","class","src","kiosk","usemap","name","onMouseOver","onMouseOut","target","alt","title","href","coords","shape","ref","AboutPage","t","App","aboutPage","dictionary","Boolean","window","location","hostname","match","document","documentElement","lang","ReactDOM","render","StrictMode","exact","path","component","App_FR","getElementById","App_EN","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,6LCI5B,SAASC,EAAKC,GAEzB,IAAMC,EAAiBC,mBAEvB,SAASC,EAAYC,GACjBH,EAAeI,QAAQC,UAAUC,OAAO,QAG5C,OACI,yBAAKC,UAAU,OAAOC,MAAO,CAACC,gBAAgB,OAAD,OAASC,IAAT,OAEzC,yBAAKC,MAAM,MAAMC,IAAKC,IAAOC,OAAO,eAEpC,yBAAKC,KAAK,aACN,0BAAMC,YAAad,EAAae,WAAYf,EAAagB,OAAO,SAASC,IAAI,WAAWC,MAAM,WAAWC,KAAK,mCAAmCC,OAAO,kBAAkBC,MAAM,SAChL,0BAAMP,YAAad,EAAae,WAAYf,EAAagB,OAAO,SAASC,IAAI,oBAAoBC,MAAM,oBAAoBC,KAAK,gEAAoEC,OAAO,iBAAiBC,MAAM,UAGtO,yBAAKZ,MAAM,mBAAmBa,IAAKxB,GAC/B,yBAAKY,IAAI,oFACT,6BACI,wCACA,6FCxBL,SAASa,EAAU1B,GAE9B,OACI,yBAAKQ,UAAU,SACX,4BAAKR,EAAM2B,EAAE,gBCNV,OACX,UAAa,KACb,kBAAqB,KACrB,gBAAmB,cACnB,eAAgB,eAChB,aAAc,c,MCCH,SAASC,EAAI5B,GAExB,OAAIA,EAAM6B,UAEF,kBAACH,EAAD,CAAWC,EAAGG,IAKlB,kBAAC/B,EAAD,CAAM4B,EAAGG,ICfF,OACX,UAAa,KACb,kBAAqB,KACrB,gBAAmB,UACnB,eAAgB,qBAChB,aAAc,0BCCH,SAASF,EAAI5B,GAExB,OAAIA,EAAM6B,UAEF,kBAACH,EAAD,CAAWC,EAAGG,IAKlB,kBAAC/B,EAAD,CAAM4B,EAAGG,ICHGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVgC,OAAlCC,SAASC,gBAAgBC,KACzBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,CAAQf,WAAW,SAGjEO,SAASU,eAAe,SAI5BP,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWG,IACjC,kBAAC,IAAD,CAAOJ,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,CAAQf,WAAW,SAGjEO,SAASU,eAAe,SDwG1B,kBAAmBE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62ae62be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kiosk.688af5e0.png\";","module.exports = __webpack_public_path__ + \"static/media/background.28778082.png\";","import React, { useRef } from 'react';\nimport kiosk from './assets/kiosk.png';\nimport background from './assets/background.png';\n\nexport default function Home(props) {\n\n    const richPreviewRef = useRef();\n\n    function showPreview(ev) {\n        richPreviewRef.current.classList.toggle(\"hide\");\n    }\n\n    return (\n        <div className=\"home\" style={{backgroundImage: `url(${background})`}}>\n\n            <img class=\"map\" src={kiosk} usemap=\"#image-map\"/>\n\n            <map name=\"image-map\">\n                <area onMouseOver={showPreview} onMouseOut={showPreview} target=\"_blank\" alt=\"Busrides\" title=\"Busrides\" href=\"https://busrides-trajetsenbus.ca\" coords=\"132,269,211,341\" shape=\"rect\"/>\n                <area onMouseOver={showPreview} onMouseOut={showPreview} target=\"_blank\" alt=\"The AI in YouTube\" title=\"The AI in YouTube\" href=\"https://www.youtube.com/watch?v=AbBcfjLXLTE&amp;feature=emb_title\" coords=\"404,85,593,199\" shape=\"rect\"/>\n            </map>\n\n            <div class=\"richPreview hide\" ref={richPreviewRef}>\n                <img src=\"https://d1em53b5kumigl.cloudfront.net/2019/11/Busrides-Home-Page-Image-Dark.jpg\"/>\n                <div>\n                    <h2>Busrides</h2>\n                    <p>Bite sized learning about digital technology and government</p>\n                </div>\n            </div>\n\n        </div>\n    );\n}","import React from 'react';\n\nexport default function AboutPage(props) {\n\n    return (\n        <div className=\"about\">\n            <h1>{props.t[\"About Page\"]}</h1>\n        </div>\n    );\n}","export default {\n    \"getLocale\": \"en\",\n    \"getOppositeLocale\": \"fr\",\n    \"getOppositeLang\": \"Français\",\n    \"Hello World!\": \"Hello World!\",\n    \"About Page\": \"About Page\"\n}","import React from 'react';\nimport Home from './Home';\nimport AboutPage from './components/templates/AboutPage';\nimport dictionary from './dictionaries/en';\nimport './App.css';\n\nexport default function App(props) {\n\n    if (props.aboutPage){\n        return (\n            <AboutPage t={dictionary}/>\n        );    \n    }\n\n    return (\n        <Home t={dictionary}/>\n    );\n    \n}\n","export default {\n    \"getLocale\": \"fr\",\n    \"getOppositeLocale\": \"en\",\n    \"getOppositeLang\": \"English\",\n    \"Hello World!\": \"Bonjour le monde !\",\n    \"About Page\": \"À propos de la page\"\n}","import React from 'react';\nimport Home from './Home';\nimport AboutPage from './components/templates/AboutPage';\nimport dictionary from './dictionaries/fr';\nimport './App.css';\n\nexport default function App(props) {\n\n    if (props.aboutPage){\n        return (\n            <AboutPage t={dictionary}/>\n        );    \n    }\n\n    return (\n        <Home t={dictionary}/>\n    );\n    \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './index.css';\nimport App_EN from './App_EN';\nimport App_FR from './App_FR';\nimport * as serviceWorker from './serviceWorker';\n\nif (document.documentElement.lang === \"fr\"){\n    ReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <Route exact path=\"/\" component={App_FR} />\n                <Route path=\"/about\" component={() => <App_FR aboutPage={true}/>}/>\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\nelse {\n    ReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <Route exact path=\"/\" component={App_EN} />\n                <Route path=\"/about\" component={() => <App_EN aboutPage={true}/>}/>\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}